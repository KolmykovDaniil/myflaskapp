pipeline {
    agent any
    environment {
        imageName = 'myflaskapp'
        registryUsername = 'kolmykovvv'
    }
    stages {
        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    powershell "docker login -u \$env:USERNAME -p \$env:PASSWORD"
                }
            }
        }
        stage('Build') {
            steps {
                powershell "docker build -t ${imageName} ."
                powershell "docker tag ${imageName} ${registryUsername}/${imageName}:latest"
                powershell "docker push ${registryUsername}/${imageName}:latest"
            }
        }
       stage('Test') {
            steps {
                dir('flask-app-ci-cd') {
                    powershell "docker stop test_app -ErrorAction SilentlyContinue"
                    powershell "docker rm test_app -ErrorAction SilentlyContinue"
                    powershell "docker run -d --name test_app -p 5000:5000 ${imageName}"
                    powershell "Start-Sleep -Seconds 5"
                    powershell "try { Invoke-WebRequest -Uri http://localhost:5000 -UseBasicParsing | Select-String 'Hello, World!' } catch { exit 1 }"
                    powershell "docker stop test_app"
                    powershell "docker rm test_app"
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                dir('flask-app-ci-cd') {
                    powershell "docker stop staging_app -ErrorAction SilentlyContinue"
                    powershell "docker rm staging_app -ErrorAction SilentlyContinue"
                    powershell "docker pull ${registryUsername}/${imageName}:latest"
                    powershell "docker run -d --name staging_app -p 5001:5000 ${registryUsername}/${imageName}:latest"
                    powershell "Start-Sleep -Seconds 5"
                    powershell "try { Invoke-WebRequest -Uri http://localhost:5001 -UseBasicParsing | Select-String 'Hello, World!' } catch { exit 1 }"
                }
            }
        }
        stage('Manual Approval') {
            steps {
                input 'Approve deployment to production?'
            }
        }
        stage('Deploy to Production') {
            steps {
                dir('flask-app-ci-cd') {
                    powershell "docker stop production_app -ErrorAction SilentlyContinue"
                    powershell "docker rm production_app -ErrorAction SilentlyContinue"
                    powershell "docker pull ${registryUsername}/${imageName}:latest"
                    powershell "docker run -d --name production_app -p 5000:5000 ${registryUsername}/${imageName}:latest"
                    powershell "Start-Sleep -Seconds 5"
                    powershell "try { Invoke-WebRequest -Uri http://localhost:5000 -UseBasicParsing | Select-String 'Hello, World!' } catch { exit 1 }"
                }
            }
        }
    }
}